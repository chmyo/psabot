{
  "_args": [
    [
      {
        "raw": "aws-lex-web-ui@github:awslabs/aws-lex-web-ui",
        "scope": null,
        "escapedName": "aws-lex-web-ui",
        "name": "aws-lex-web-ui",
        "rawSpec": "github:awslabs/aws-lex-web-ui",
        "spec": "github:awslabs/aws-lex-web-ui",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:awslabs/aws-lex-web-ui.git",
          "sshUrl": "git+ssh://git@github.com/awslabs/aws-lex-web-ui.git",
          "httpsUrl": "git+https://github.com/awslabs/aws-lex-web-ui.git",
          "gitUrl": "git://github.com/awslabs/aws-lex-web-ui.git",
          "shortcut": "github:awslabs/aws-lex-web-ui",
          "directUrl": "https://raw.githubusercontent.com/awslabs/aws-lex-web-ui/master/package.json"
        }
      },
      "/home/ec2-user/aws-ai-qna-bot"
    ]
  ],
  "_from": "awslabs/aws-lex-web-ui",
  "_id": "aws-lex-web-ui@0.12.0",
  "_inCache": true,
  "_location": "/aws-lex-web-ui",
  "_phantomChildren": {},
  "_requested": {
    "raw": "aws-lex-web-ui@github:awslabs/aws-lex-web-ui",
    "scope": null,
    "escapedName": "aws-lex-web-ui",
    "name": "aws-lex-web-ui",
    "rawSpec": "github:awslabs/aws-lex-web-ui",
    "spec": "github:awslabs/aws-lex-web-ui",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:awslabs/aws-lex-web-ui.git",
      "sshUrl": "git+ssh://git@github.com/awslabs/aws-lex-web-ui.git",
      "httpsUrl": "git+https://github.com/awslabs/aws-lex-web-ui.git",
      "gitUrl": "git://github.com/awslabs/aws-lex-web-ui.git",
      "shortcut": "github:awslabs/aws-lex-web-ui",
      "directUrl": "https://raw.githubusercontent.com/awslabs/aws-lex-web-ui/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/awslabs/aws-lex-web-ui.git#0ce479372b6fb6b94b7cdeb22db8d0ad5a94bdf2",
  "_shasum": "75d6331e42c284b098abb5d356cb2c919206a0e2",
  "_shrinkwrap": null,
  "_spec": "aws-lex-web-ui@github:awslabs/aws-lex-web-ui",
  "_where": "/home/ec2-user/aws-ai-qna-bot",
  "author": {
    "name": "AWS"
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "ie >= 11"
  ],
  "bugs": {
    "url": "https://github.com/awslabs/aws-lex-web-ui/issues"
  },
  "dependencies": {},
  "description": "Sample Amazon Lex Web Interface",
  "devDependencies": {
    "autoprefixer": "^7.2.5",
    "babel-cli": "^6.26.0",
    "babel-eslint": "^8.2.1",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-stage-2": "^6.24.1",
    "css-loader": "^0.28.8",
    "eslint": "^4.15.0",
    "eslint-config-airbnb-base": "^12.1.0",
    "eslint-friendly-formatter": "^3.0.0",
    "eslint-loader": "^1.9.0",
    "eslint-plugin-import": "^2.8.0",
    "express": "^4.16.2",
    "extract-text-webpack-plugin": "^3.0.2",
    "postcss-cli": "^4.1.1",
    "postcss-loader": "^2.0.10",
    "style-loader": "^0.19.1",
    "webpack": "^3.10.0",
    "webpack-dev-server": "^2.10.1"
  },
  "engines": {
    "node": ">= 8.1.2",
    "npm": ">= 5.2.0"
  },
  "gitHead": "0ce479372b6fb6b94b7cdeb22db8d0ad5a94bdf2",
  "homepage": "https://github.com/awslabs/aws-lex-web-ui#readme",
  "keywords": [
    "aws",
    "lex",
    "bot",
    "chatbot",
    "web",
    "interface",
    "ui"
  ],
  "license": "SEE LICENSE IN LICENSE",
  "main": "dist/lex-web-ui.min.js",
  "name": "aws-lex-web-ui",
  "optionalDependencies": {},
  "readme": "# Sample Amazon Lex Web Interface\n\n> Sample Amazon Lex Web Interface\n\n# Overview\nThis is a sample [Amazon Lex](https://aws.amazon.com/lex/)\nweb interface. It provides a chatbot UI component that can be integrated\nin your website. The interface allows to interact with a Lex bot directly\nfrom a browser using text or voice.\n\nFeatures include:\n- Mobile ready responsive UI with full page or embeddable widget modes\n- Support for voice and text with the ability to seamless switch from\none mode to the other\n- Voice support provides automatic silence detection, transcriptions\nand ability to interrupt responses and replay recordings\n- Display of Lex response cards\n- Ability to programmatically configure and interact with the chatbot\nUI using JavaScript\n\nIt can be used as a full page chatbot UI:\n\n<img src=\"./img/webapp-full.gif\" width=480>\n\nOr embedded into an existing site as a chatbot widget:\n\n<img src=\"./img/webapp-iframe.gif\" width=480>\n\n# Getting Started\nThe easiest way to test drive the chatbot UI is to deploy it using the\n[AWS CloudFormation](https://aws.amazon.com/cloudformation/) templates\nprovided by this project. Once you have launched the CloudFormation stack,\nyou will get a fully working demo site hosted in your account.\n\n\nClick this button to launch it:\n\n<a target=\"_blank\" href=\"https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?stackName=lex-web-ui&templateURL=https://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-lex-web-ui/artifacts/templates/master.yaml\"><span><img height=\"24px\" src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\"/></span></a>\n\nBy default, the CloudFormation template\ncreates a sample Lex bot and a [Amazon Cognito Identity\nPool](http://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html)\nto get you started. It copies the chatbot UI web application to an\n[Amazon S3](https://aws.amazon.com/s3/) bucket including a dynamically\ncreated configuration file. The CloudFormation stack outputs links to\nthe demo and related configuration once deployed. See the [CloudFormation\nDeployment](#cloudformation-deployment) section for details.\n\nYou can modify the configuration of the deployed demo site to customize\nthe chatbot UI. It can also be further configured to be embedded it on\nyour web site. See the sections below for code samples and a description\nof the configuration and deployment options.\n\n# Integrating into your Site and Deploying\nIn addition to the CloudFormation deployment mentioned above, there are\nother methods to integrate and deploy this project. Here is a summary\nof the various methods:\n\n| # | Method | Description | Use Case |\n| --- | --- | --- | --- |\n| 1 | [CloudFormation Deployment](#cloudformation-deployment) using the CloudFormation [templates](templates) provided by this project | Fully automated deployment of a hosted web application to an S3 bucket with an optional CI/CD pipeline. By default, it also creates a Cognito Identity Pool and a sample Lex bot | Use when you want to have a infrastructure as code approach that automatically builds and configures the chatbot UI resources |\n| 2 | [Mobile Hub Deployment](#mobile-hub-deployment) using the import file: [lex-web-ui-mobile-hub.zip](dist/lex-web-ui-mobile-hub.zip) | Deploys a pre-built version of the chatbot UI to S3 and CloudFront. It creates the Cognito Identity Pool and a sample Lex bot. You can use the Mobile Hub Console to manage it or make changes (e.g. linking to another bot) | Use when you want an easy deployment using the AWS Console or for quick manual testing |\n| 3 | Use the pre-built [libraries](#libraries) from the [dist](dist) directory of this repo | We provide a pre-built version of the chatbot UI component and a loader library that you can use on your web site as a [stand alone page](#stand-alone-page) or as an embeddable [iframe](#iframe) | Use when you have an existing site and want to add the chatbot UI to it by simply copying or referencing the library files |\n| 4 | Use npm to install and use the chatbot UI as a Vue component | Enables developers to consume this project as an [npm](https://www.npmjs.com/) package that provides a [Vue](https://vuejs.org/) component. See the [Npm Install and Vue Component Use](#npm-install-and-vue-component-use) section for details | Use when developing front-end based web applications built using JavaScript and bundled with tools such as [webpack](https://webpack.github.io) |\n\nSee the [Usage](#usage) and [Deployment](#deployment) sections below for details.\n\n# Usage\nThis project provides a set of JavaScript libraries used to dynamically\ninsert the chatbot UI in a web page. The chatbot UI is loaded and\ncustomized by including these libraries in your code and calling their\nfunctions with configuration parameters.\n\nThe chatbot UI can be displayed either as a full page or embedded\nin an iframe. In this section, you will find a brief overview of\nthe libraries and configuration parameters. It is useful to get\nfamiliar with the concepts described in the [Libraries](#libraries)\nand [Configuration](#configuration) sections before jumping to the code\n[examples](#examples).\n\n## Libraries\nThe list below describes the libraries produced by this project.\nPre-built versions of the libraries are found under the [dist](/dist)\ndirectory of this repository.\n\n1. **Chatbot UI component**. A UI widget packaged as a JavaScript reusable\ncomponent that can be plugged in a web application. The library is\nprovided by the `lex-web-ui.js` file under the [dist](dist) directory. It\nis bundled from the source under the [lex-web-ui](lex-web-ui)\ndirectory. This library is geared to be used as an import in a webpack\nbased web application but can also be instantiated directly in a web page\nprovided that you manually load the dependencies and explicitly pass\nthe configuration. See the component's [README](lex-web-ui/README.md)\nfor details\n2. **Loader**. A script that adds the chatbot UI component library\ndescribed in the item above to a web page. It facilitates the\nconfiguration and dependency loading process. The library\nis provided by the `lex-web-ui-loader.js` file under the\n[dist](dist) directory. It is bundled from the sources under the\n[src/lex-web-ui-loader](src/lex-web-ui-loader) directory. This library\nis used by adding a few script tags to an HTML page. See the loader\n[README](src/README.md) for details\n\n## Configuration\nThe chatbot UI component requires a configuration object\npointing to an existing Lex bot and to an [Amazon Cognito Identity\nPool](http://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html)\nto create credentials used to authenticate the Lex API calls from the\nbrowser. The configuration object is also used to customize its behavior\nand UI elements of the chatbot UI component.\n\nThe CloudFormation and Mobile Hub deployment methods, from this project,\nhelp with building a base configuration file. When deploying with those\nmethods, the base configuration is automatically pointed to the the\nresources created in the deployment (i.e. Lex and Cognito).\n\nYou can override the configuration at run time by passing\nparameters to the library functions or using various dynamic\nconfiguration methods provided by the loader library (e.g. JSON\nfile, events). For details, see the [ChatBot UI Configuration\nLoading](/src/README.md#chatbot-ui-configuration-loading) section\nof the loader library documentation and the [Configuration and\nCustomization](/lex-web-ui/README.#configuration-and-customization)\nsection of the chatbot UI component documentation.\n\n## Examples\nThe examples below are organized around the following use cases:\n1. [Stand-Alone Page](#stand-alone-page)\n2. [Iframe](#iframe)\n3. [Npm Install and Vue Component Use](#npm-install-and-vue-component-use)\n\n### Stand-Alone Page\nTo render the chatbot UI as a stand-alone full page, you can use two\nalternatives: 1) directly use the chatbot UI component library or 2)\nuse the loader library. These libraries (see [Libraries](#libraries))\nprovide pre-built JavaScript and CSS files that are ready to be included\ndirectly into an HTML file to display a full page chatbot UI.\n\nWhen you use the chatbot UI component directly, you have to manually\nload the component's dependencies and provide its configuration as a\nparameter. The loader library alternative provides more configuration\noptions and automates the process of loading dependencies. It encapsulates\nthe chatbot UI component in an automated load process.\n\n#### Stand-Alone Page Using the Loader Library\nThe loader library provides the easiest way to display the chatbot UI. The\nentry point to this library is the `lex-web-ui-loader.js` script. This\nscript facilitates the process of loading run-time dependencies and\nconfiguration.\n\nIf you deploy using the CloudFormation or Mobile Hub methods, you will\nget an S3 bucket with the loader library script and related files in a\nway that is ready to be used. Alternatively, you can copy the files from\nthe `dist` directory of this repository to your web server and include the\nloader.\n\nIn its most simple setup, you can use the loader library like this:\n```html\n<!-- include the loader library script -->\n<script src=\"./lex-web-ui-loader.js\"></script>\n<script>\n  /*\n    The loader library creates a global object named ChatBotUiLoader\n    It includes the FullPageLoader constructor\n    An instance of FullPageLoader has the load function which kicks off\n    the load process\n  */\n\n  // The following statement instantiate FullPageLoader and\n  // calls the load function.\n  // It is assumed that the configuration is present in the\n  // default JSON file: ./lex-web-ui-loader-config.json\n  new ChatBotUiLoader.FullPageLoader().load();\n</script>\n```\n\nFor more details and other code examples about using the loader script\nin a full page setup, see the [full page](src/README.md#full-page)\nsection of the loader documentation. You can also see the source of the\n[index.html](src/website/index.html) page used in the demo site.\n\n#### Stand-Alone Page Directly Using the ChatBot UI Component\nDirectly loading the chatbot UI component works at a lower level than\nusing the loader library as described above. This approach can be used\nif you want to manually control the rendering, configuration and\ndependency loading process.\n\nThe entry point to the chatbot UI component is the `lex-web-ui.js`\nJavaScript file. The UI CSS styles are contained in the `lex-web-ui.css`\nfile. The component depends on the [Vue](https://vuejs.org/),\n[Vuex](https://vuex.vuejs.org/), [Vuetify](https://vuetifyjs.com/)\nand [AWS SDK](https://aws.amazon.com/sdk-for-browser/) libraries. You\nshould either host these dependencies on your site or load them from a\nthird-party CDN.\n\nThe HTML code below is an illustration of directly loading the chatbot UI\nlibrary and its dependencies.\n\n**NOTE**: The versions of the links below may need to be pointed\nto the latest supported versions.\n\n```html\n<html>\n  <head>\n    <!-- Font Dependencies -->\n    <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons\" rel=\"stylesheet\" type=\"text/css\">\n\n    <!-- Vuetify CSS Dependencies -->\n    <link href=\"https://unpkg.com/vuetify@0.16.9/dist/vuetify.min.css\" rel=\"stylesheet\" type=\"text/css\">\n\n    <!-- LexWebUi CSS from dist directory -->\n    <link href=\"./lex-web-ui.css\" rel=\"stylesheet\" type=\"text/css\">\n    <!-- page specific LexWebUi styling -->\n    <style type=\"text/css\">\n      #lex-web-ui-app { display: flex; height: 100%; width: 100%; }\n      body, html { overflow-y: auto; overflow-x: hidden; }\n    </style>\n  </head>\n  <body>\n    <!-- application will be dynamically mounted here -->\n    <div id=\"lex-web-ui\"></div>\n\n    <!--\n      Vue, Vuex, Vuetifiy and AWS SDK dependencies must be loaded before lex-web-ui.js.\n      Loading from third party CDN for quick testing\n    -->\n    <script src=\"https://unpkg.com/vue@2.5.3\"></script>\n    <script src=\"https://unpkg.com/vuex@3.0.1\"></script>\n    <script src=\"https://unpkg.com/vuetify@0.16.9\"></script>\n    <script src=\"https://sdk.amazonaws.com/js/aws-sdk-2.149.0.min.js\"></script>\n\n    <!-- LexWebUi Library from dist directory -->\n    <script src=\"./lex-web-ui.js\"></script>\n\n    <!-- instantiate the web ui with a basic config -->\n    <script>\n      // LexWebUi supports numerous configuration options. Here\n      // is an example using just a couple of the required options.\n      var config = {\n        cognito: {\n          // Your Cognito Pool Id - this is required to provide AWS credentials\n          poolId: '<your cognito pool id>'\n        },\n        lex: {\n          // Lex Bot Name in your account\n          botName: '<your lex bot name>'\n        }\n      };\n      // load the LexWebUi component\n      var lexWebUi = new LexWebUi.Loader(config);\n      // instantiate Vue\n      new Vue({\n        el: '#lex-web-ui',\n        store: lexWebUi.store,\n        template: '<div id=\"lex-web-ui-app\"><lex-web-ui/></div>',\n      });\n    </script>\n  </body>\n</html>\n```\n### Iframe\nYou can embed the chatbot UI into an existing page using an iframe.\nThis approach provides a self-contained widget that can interact with\nthe parent page hosting the iframe. The `lex-web-ui-loader.js` loader\nlibrary provides the functionality to add it as an iframe in a page.\n\nThis loader script dynamically creates the iframe tag and supports\npassing asynchronous configuration using events and JSON files. It also\nprovides an API between the iframe and the parent page which can be used\nto pass Lex state and other events. These features are detailed in the\n[Iframe Embedding](src/README.md#iframe-embedding) section of the library.\n\nThe HTML code below is a basic example of a parent page that adds the\nchatbot UI as an iframe. In this scenario, the libraries and related\nfiles from the `dist` directory of this repo are hosted in the same\ndirectory as the parent page.\n\nPlease note that the `loaderOptions` variable has an `iframeSrcPath`\nfield which defines the path to the full page chatbot UI. This variable\ncan be pointed to a page like the one described in the [stand-alone\npage](#stand-alone-page) section.\n\n```html\n<html>\n  <head>\n    <title>My Parent Page</title>\n  </head>\n  <body>\n    <h1>Welcome to my parent page</h1>\n    <!-- loader script -->\n    <script src=\"./lex-web-ui-loader.js\"></script>\n    <script>\n      /*\n        The loader library creates a global object named ChatBotUiLoader\n        It includes the IframeLoader constructor\n        An instance of IframeLoader has the load function which kicks off\n        the load process\n      */\n\n      // options for the loader constructor\n      var loaderOptions = {\n        // you can put the chatbot UI config in a JSON file\n        configUrl: './chatbot-ui-loader-config.json',\n\n        // the full page chatbot UI that will be iframed\n        iframeSrcPath: './chatbot-index.html#/?lexWebUiEmbed=true'\n      };\n\n      // The following statement instantiates the IframeLoader\n      var iframeLoader = new ChatBotUiLoader.IframeLoader(loaderOptions);\n\n      // chatbot UI config\n      // The loader can also obtain these values from other sources such\n      // as a JSON file or events. The configUrl variable in the\n      // loaderOptions above can be used to put these config values in a file\n      // instead of explicitly passing it as an argument.\n      var chatbotUiconfig = {\n        ui: {\n          // origin of the parent site where you are including the chatbot UI\n          // set to window.location.origin since hosting on same site\n          parentOrigin: window.location.origin,\n        },\n        iframe: {\n          // origin hosting the HTML file that will be embedded in the iframe\n          // set to window.location.origin since hosting on same site\n          iframeOrigin: window.location.origin,\n        },\n        cognito: {\n          // Your Cognito Pool Id - this is required to provide AWS credentials\n          poolId: '<your cognito pool id>'\n        },\n        lex: {\n          // Lex Bot Name in your account\n          botName: '<your lex bot name>'\n        }\n      };\n\n      // Call the load function which returns a promise that is resolved\n      // once the component is loaded or is rejected if there is an error\n      iframeLoader.load(chabotUiConfig)\n        .then(function () {\n          console.log('iframe loaded');\n        })\n        .catch(function (err) {\n          console.error(err);\n        });\n    </script>\n  </body>\n</html>\n```\nFor more examples showing how to include the chatbot UI as an iframe,\nsee the source of the [parent.html](src/website/parent.html) page and the\n[Iframe Embedding](src/README.md#iframe-embedding) documentation of the\nloader library.\n\n### Npm Install and Vue Component Use\nYou can use the [npm](https://docs.npmjs.com/) package manager to\ninstall this project. The npm installation provides a library that you\ncan import as a module into your JavaScript code. The component is built\nas a reusable [Vue](https://vuejs.org/) plugin. This approach is geared\nto be used in a [webpack](https://webpack.github.io) based project.\n\nPackage installation using `npm`:\n\n```shell\n# install npm package from github repo\nnpm install --save awslabs/aws-lex-web-ui\n# you may need to install co-dependencies:\nnpm install --save vue vuex vuetify material-design-icons roboto-fontface\n```\n\nThis is a quick example showing how to import the library in your project:\n\n```JavaScript\n// assumes that a bundler like webpack will handle import/require\n// using es6 module\nimport LexWebUi from 'aws-lex-web-ui';\n// or using require\nvar LexWebUi = require('aws-lex-web-ui');\n// import the debug non-minimized version\nimport LexWebUi from 'aws-lex-web-ui/dist/lex-web-ui';\n```\n\nThe source of the chatbot UI component resides under the\n[lex-web-ui](lex-web-ui) directory. For further details about the chatbot\nUI component see its [README](lex-web-ui/README.md) file.\n\n### Sample Site\nThis repository provides a sample site that you can use as a base\nfor development. The site is a couple of HTML pages can be found\nin the [src/website](src/website) directory. The pages includes the\n[index.html](src/website/index.html) file which loads the chatbot UI\nin a stand-alone page and the [parent.html](src/website/parent.html)\nwhich page loads the chatbot UI in an iframe.\n\nThese pages are the same ones that are deployed by the CloudFormation\nand Mobile Hub deployment methods in this project. They use the\n`lex-web-ui-loader.js` loader library to display and configure the chatbot\nUI. You can run a development version of this sample site on your machine.\n\n#### Running Locally\nThis project provides a simple HTTP server to serve the sample site.\nYou can run the server using [Node.js](https://nodejs.org) on your local\nmachine or a test server.\n\nThe chatbot UI requires proper configuration values in the files located\nunder the [src/config](src/config) directory. Modify the values in the\n`lex-web-ui-loader-config.json` and/or `aws-config.js` files under the\n`src/config` directory. If you deployed the demo site using Mobile\nHub or CloudFormation methods provided by this project, you can copy\nthe automatically generated config files from the S3 buckets to your\ndevelopment host.\n\nAs a minimum,you would need to pass an existing Cognito Pool Id\nand Lex Bot name. For example, set the appropriate values in the\n`src/config/lex-web-ui-loader-config.json` file:\n```JSON\n  ...\n  cognito: {\n    \"poolId\": \"us-east-1:deadbeef-fade-babe-cafe-0123456789ab\"\n  },\n  lex: {\n    \"botName\": \"myHelpBot\"\n  }\n  ...\n```\n\nBefore you run the local development server, you need to install the\ndevelopment dependencies with the command:\n```shell\nnpm install\n```\nTo start the HTTP server web on port `8000`, issue the command:\n```shell\n# serves http://localhost:8000/index.html\n# and http://localhost:8000/parent.html\nnpm start\n```\n\nIf you want to hack the libraries under the `src/lex-web-ui-loader`\ndirectory, the project provides a hot reloadable [webpack dev\nserver](https://github.com/webpack/webpack-dev-server) setup with the\nfollowing command:\n```shell\n# runs on port 8000\nnpm run dev\n```\n\nFor a more advanced local host development and test environment, see the\n[Dependencies and Build Setup](lex-web-ui#dependencies-and-build-setup)\ndocumentation of the chatbot UI component.\n\n# Deploying\nThis project provides deployment options using [AWS\nCloudFormation](https://aws.amazon.com/cloudformation/) or [AWS Mobile\nHub](https://aws.amazon.com/mobile/).  Both deployment options can be\nused to launch a fully configured working demo site and related resources\n(e.g. Lex bot and Cognito Identity Pool).\n\nThe CloudFormation deployment is the preferred method as it allows to\nautomatically build, configure and deploy the application (including an\noptional CI/CD pipeline) and it provides a higher degree of flexibility\nwhen integrating with an existing environment. The Mobile Hub deployment\nallows to quickly create a demo site with minimal pre-deployment\nconfiguration requirements but may need manual post-deployment steps.\n\n## CloudFormation Deployment\nThe CloudFormation stack creates a web app in an S3 bucket which you\ncan link from your site. The S3 bucket also hosts the configuration,\nJavaScript and CSS files which can be loaded by your existing web\npages. The CloudFormation deployment is documented in the\n[README](templates/README.md) file under the [templates](templates)\ndirectory.\n\n## Mobile Hub Deployment\nThe Mobile Hub deployment is done by importing\nthe [lex-web-ui-mobile-hub.zip](dist/lex-web-ui-mobile-hub.zip) file\nusing the Mobile Hub console. When this file is imported by Mobile Hub,\nit creates a project that hosts the chatbot UI web app in\n[S3](https://aws.amazon.com/s3/) and\n[CloudFront](https://aws.amazon.com/cloudfront/).\nIt also automatically deploys and configures a sample Lex bot based on the\n[Order Flowers bot](http://docs.aws.amazon.com/lex/latest/dg/gs-bp-create-bot.html) (you can later change it to import a different bot into the project)\nand an [Amazon Cognito Identity Pool](http://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html).\n\nTo launch with Mobile Hub:\n1. Sign in to the [AWS Mobile Hub console](https://console.aws.amazon.com/mobilehub/)\n2. Click this button: <a target=\"_blank\" href=\"https://console.aws.amazon.com/mobilehub/home?#/?config=https://github.com/awslabs/aws-lex-web-ui/blob/master/dist/lex-web-ui-mobile-hub.zip\"><span><img height=\"24px\" src=\"https://s3.amazonaws.com/deploytomh/button-deploy-aws-mh.png\"/></span></a>\n3. Once the project is imported, you should be able to browse to the\nsample web app by choosing **Hosting and Streaming** in the Mobile\nHub project and clicking the links under **Launch my web app**\n\n**NOTE:** If the Mobile Hub deployed site causes the browser to download\nthe files instead of rendering it, you will have to re-sync the files\nto the S3 bucket using the S3 console or aws cli. See the\n[Add Mobile Hub Hosting and Streaming to Your Mobile App](https://docs.aws.amazon.com/mobile-hub/latest/developerguide/add-aws-mobile-hosting-and-streaming.html#add-aws-mobile-hosting-and-streaming-app)\nsection of the Mobile Hub documentation for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/awslabs/aws-lex-web-ui.git"
  },
  "scripts": {
    "build": "npm run build-prod && npm run build-dev",
    "build-dev": "webpack --hide-modules",
    "build-prod": "webpack -p --env production",
    "dev": "webpack-dev-server",
    "lint": "eslint --format node_modules/eslint-friendly-formatter src/lex-web-ui-loader",
    "start": "node server.js"
  },
  "version": "0.12.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">= 8.1.2",
        "npm": ">= 5.2.0"
      },
      "pkgid": "aws-lex-web-ui@0.12.0"
    }
  ]
}
